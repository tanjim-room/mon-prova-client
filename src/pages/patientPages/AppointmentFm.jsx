import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import dayjs from "dayjs";
// import doctors from "../../../public/doctorInfo.json"; // paste your JSON here

const AppointmentForm = () => {
    
        const { register, handleSubmit, reset } = useForm();
         const [selectedDate, setSelectedDate] = useState(null);
  const [selectedType, setSelectedType] = useState("");
  const [availableSlots, setAvailableSlots] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState(null);

  // тЬЕ Manual EnglishтЖТBangla weekday map (exact match with JSON)
  const dayMap = {
    Sunday: "рж░ржмрж┐ржмрж╛рж░",
    Monday: "рж╕рзЛржоржмрж╛рж░",
    Tuesday: "ржоржЩрзНржЧрж▓ржмрж╛рж░",
    Wednesday: "ржмрзБржзржмрж╛рж░",
    Thursday: "ржмрзГрж╣рж╕рзНржкрждрж┐ржмрж╛рж░",
    Friday: "рж╢рзБржХрзНрж░ржмрж╛рж░",
    Saturday: "рж╢ржирж┐ржмрж╛рж░",
  };

  // ЁЯй╡ Handle form submit
  const onSubmit = (data) => {
    alert(
      `тЬЕ ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ ржмрзБржХ рж╣ржпрж╝рзЗржЫрзЗ!\nржбрж╛ржХрзНрждрж╛рж░: ${selectedDoctor?.fullName}\nрждрж╛рж░рж┐ржЦ: ${dayjs(selectedDate).format(
        "DD/MM/YYYY"
      )}\nрж╕рзЗрж╢ржи: ${data.slot}\nржорзЛржб: ${selectedType}`
    );
    reset();
    setSelectedType("");
    setSelectedDate(null);
    setAvailableSlots([]);
    setSelectedDoctor(null);
  };

  // ЁЯЧУ Handle date selection
  const handleDateChange = (date) => {
    setSelectedDate(date);

    if (!selectedType) {
      alert("ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржЧрзЗ ржЕржирж▓рж╛ржЗржи ржмрж╛ ржЕржлрж▓рж╛ржЗржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи!");
      return;
    }

    const englishDay = dayjs(date).format("dddd");
    const banglaDay = dayMap[englishDay]; // тЬЕ Convert to Bangla name like in your JSON

    // Filter doctors by selectedType and matching day
    const filteredDoctors = doctors
      .map((doc) => {
        const slots =
          selectedType === "ржЕржирж▓рж╛ржЗржи"
            ? doc.availabilitySchedule.onlineSlots
            : doc.availabilitySchedule.offlineSlots;
        const match = slots.filter((slot) => slot.day === banglaDay);
        return { ...doc, slots: match };
      })
      .filter((doc) => doc.slots.length > 0 && doc.medium.includes(selectedType));

    setAvailableSlots(filteredDoctors);
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white shadow-xl rounded-2xl">
      <h2 className="text-2xl font-bold mb-4 text-center text-blue-700">
        ЁЯй║ ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ ржмрзБржХрж┐ржВ ржлрж░рзНржо
      </h2>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        {/* Patient Info */}
        <div className="grid md:grid-cols-2 gap-4">
          <input {...register("name", { required: true })} placeholder="ржирж╛ржо" className="input input-bordered w-full" />
          <input {...register("mobile", { required: true })} placeholder="ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░" className="input input-bordered w-full" />
          <input {...register("email")} placeholder="ржЗржорзЗржЗрж▓" className="input input-bordered w-full" />
          <input {...register("age")} placeholder="ржмржпрж╝рж╕" type="number" className="input input-bordered w-full" />
          <select {...register("gender")} className="select select-bordered w-full">
            <option value="">рж▓рж┐ржЩрзНржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
            <option>ржкрзБрж░рзБрж╖</option>
            <option>ржирж╛рж░рзА</option>
            <option>ржЕржирзНржпрж╛ржирзНржп</option>
          </select>
          <select {...register("bloodGroup")} className="select select-bordered w-full">
            <option value="">рж░ржХрзНрждрзЗрж░ ржЧрзНрж░рзБржк</option>
            <option>A+</option><option>A-</option><option>B+</option><option>B-</option>
            <option>O+</option><option>O-</option><option>AB+</option><option>AB-</option>
          </select>
          <input {...register("profession")} placeholder="ржкрзЗрж╢рж╛" className="input input-bordered w-full" />
          <input {...register("institute")} placeholder="ржкрзНрж░рждрж┐рж╖рзНржарж╛ржи" className="input input-bordered w-full" />
        </div>

        <textarea {...register("problem", { required: true })} placeholder="ржЖржкржирж╛рж░ рж╕ржорж╕рзНржпрж╛ рж╕ржВржХрзНрж╖рзЗржкрзЗ рж▓рж┐ржЦрзБржи" className="textarea textarea-bordered w-full"></textarea>

        {/* Select Online/Offline */}
        <div className="flex gap-4 items-center">
          <label className="font-semibold">ржХржирж╕рж╛рж▓ржЯрзЗрж╢ржирзЗрж░ ржзрж░ржи:</label>
          <div className="flex gap-2">
            <button
              type="button"
              onClick={() => setSelectedType("ржЕржлрж▓рж╛ржЗржи")}
              className={`btn ${selectedType === "ржЕржлрж▓рж╛ржЗржи" ? "btn-primary" : "btn-outline"}`}
            >
              ЁЯПе ржЕржлрж▓рж╛ржЗржи
            </button>
            <button
              type="button"
              onClick={() => setSelectedType("ржЕржирж▓рж╛ржЗржи")}
              className={`btn ${selectedType === "ржЕржирж▓рж╛ржЗржи" ? "btn-primary" : "btn-outline"}`}
            >
              ЁЯТ╗ ржЕржирж▓рж╛ржЗржи
            </button>
          </div>
        </div>

        {/* Date Picker */}
        <div>
          <label className="font-semibold block mb-1">рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:</label>
          <DatePicker
            selected={selectedDate}
            onChange={handleDateChange}
            dateFormat="dd/MM/yyyy"
            className="input input-bordered w-full"
            placeholderText="рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи"
          />
        </div>

        {/* Doctor & Slots */}
        {availableSlots.length > 0 ? (
          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-2 text-blue-600">ржЙржкрж▓ржмрзНржз ржбрж╛ржХрзНрждрж╛рж░ ржУ рж╕ржоржпрж╝:</h3>
            {availableSlots.map((doc) => (
              <div key={doc.doctorID} className="border rounded-lg p-3 mb-3">
                <div className="flex items-center gap-3">
                  <img src={doc.image} alt={doc.fullName} className="w-14 h-14 rounded-full" />
                  <div>
                    <p className="font-bold">{doc.fullName}</p>
                    <p className="text-sm text-gray-500">{doc.designation}</p>
                    <p className="text-sm text-gray-600">ржлрж┐: {doc.consultationFee} ржЯрж╛ржХрж╛</p>
                  </div>
                </div>

                <div className="mt-2 grid grid-cols-2 gap-2">
                  {doc.slots.map((slot, idx) => (
                    <label key={idx} className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        {...register("slot", { required: true })}
                        value={`${doc.fullName} (${slot.day} - ${slot.time})`}
                        onChange={() => setSelectedDoctor(doc)}
                        className="radio radio-primary"
                      />
                      <span className="text-sm">{slot.day} | {slot.time}</span>
                    </label>
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : (
          selectedDate &&
          <p className="text-center text-gray-500 mt-4">тЭМ ржПржЗ рждрж╛рж░рж┐ржЦрзЗ ржХрзЛржирзЛ ржбрж╛ржХрзНрждрж╛рж░ ржЙржкрж▓ржмрзНржз ржирзЗржЗ</p>
        )}

        {/* Submit */}
        <button type="submit" className="btn bg-blue-600 text-white w-full hover:bg-blue-700">
          ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ ржмрзБржХ ржХрж░рзБржи
        </button>
      </form>
    </div>
  );
    };

    export default AppointmentForm;